{"version":3,"sources":["Components/Home.jsx","Constants/AppContants.js","Components/ResetPassword.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","to","appConstants","resetPasswordAPI","ResetPassword","query","URLSearchParams","useLocation","search","useState","code","get","password","passwordConfirmation","showPassword","formData","setFormData","isLoading","setIsLoading","formSuccess","setFormSuccess","showError","errorMessage","setShowError","onInputChange","e","target","id","value","handleClickShowPassword","handleMouseDownPassword","event","preventDefault","postRequest","a","axios","post","status","response","data","messages","message","className","onSubmit","noValidate","autoComplete","Box","py","FormControl","fullWidth","InputLabel","htmlFor","Input","type","onChange","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","onMouseDown","Button","variant","color","disabled","length","Alert","severity","AlertTitle","App","basename","process","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a40ced69.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n  return (\n    <div>\n      <h3>My Appets app</h3>\n      <ul>\n        <li>\n          <Link to=\"/reset-password\">Reset Password</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Home;\n","const appConstants = {\n  resetPasswordAPI: \"https://api.myappets.ga/auth/reset-password\",\n};\n\nexport default appConstants;\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  IconButton,\n  Input,\n  InputAdornment,\n  InputLabel,\n} from \"@material-ui/core\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { useLocation } from \"react-router-dom\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport axios from \"axios\";\nimport appConstants from \"../Constants/AppContants\";\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction ResetPassword() {\n  const query = useQuery();\n\n  const [formData, setFormData] = useState({\n    code: query.get(\"code\"),\n    password: \"\",\n    passwordConfirmation: \"\",\n    showPassword: false,\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [formSuccess, setFormSuccess] = useState(false);\n  const [showError, setShowError] = useState({\n    showError: false,\n    errorMessage: \"\",\n  });\n\n  const onInputChange = (e) => {\n    const { target } = e;\n    setFormData({\n      ...formData,\n      [target.id]: target.value,\n    });\n  };\n\n  const handleClickShowPassword = () => {\n    setFormData({ ...formData, showPassword: !formData.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const postRequest = async () => {\n    try {\n      const response = await axios.post(\n        appConstants.resetPasswordAPI,\n        formData\n      );\n\n      // If success, show success message\n      if (response.status === 200) {\n        setFormSuccess(true);\n      } else {\n        // on request error\n        setShowError({\n          showError: true,\n          errorMessage: \"An error ocurred\",\n        });\n      }\n    } catch (err) {\n      const errorMessage =\n        err?.response?.data?.data[0]?.messages[0]?.id ===\n        \"Auth.form.error.code.provide\"\n          ? \"Code EXPIRED or it's INCORRECT.\"\n          : err?.response?.data?.data[0]?.messages[0]?.message;\n\n      setShowError({\n        showError: true,\n        errorMessage: errorMessage || \"An error ocurred\",\n      });\n\n      setIsLoading(false);\n    }\n  };\n\n  const submitForm = (event) => {\n    event.preventDefault();\n\n    if (formData.code) {\n      setIsLoading(true);\n      setShowError({ showError: false });\n      postRequest();\n    } else {\n      setShowError({\n        showError: true,\n        errorMessage: \"There is not code provided.\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"myappets__reset-pass reset-pass\">\n      <h2>My Appets, Reset Password</h2>\n      <div className=\"reset-pass__cont\">\n        {!formSuccess && (\n          <form onSubmit={(e) => submitForm(e)} noValidate autoComplete=\"off\">\n            <Box py={1}>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"password\">\n                  Password: (min-length: 6 characters)\n                </InputLabel>\n                <Input\n                  id=\"password\"\n                  type={formData.showPassword ? \"text\" : \"password\"}\n                  onChange={(e) => onInputChange(e)}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                        onMouseDown={handleMouseDownPassword}\n                      >\n                        {formData.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n            </Box>\n            <Box py={1}>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"passwordConfirmation\">\n                  Confirm Password:\n                </InputLabel>\n                <Input\n                  id=\"passwordConfirmation\"\n                  type={formData.showPassword ? \"text\" : \"password\"}\n                  onChange={(e) => onInputChange(e)}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                        onMouseDown={handleMouseDownPassword}\n                      >\n                        {formData.showPassword ? (\n                          <Visibility />\n                        ) : (\n                          <VisibilityOff />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n            </Box>\n\n            <Box py={1}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={\n                  isLoading ||\n                  !formData.password ||\n                  !formData.passwordConfirmation ||\n                  formData.password !== formData.passwordConfirmation ||\n                  formData.password.length < 6 ||\n                  formData.passwordConfirmation.length < 6\n                }\n              >\n                {!isLoading ? \"Reset Password\" : \"Loading\"}\n              </Button>\n            </Box>\n            {showError.showError && (\n              <Alert severity=\"error\">{showError.errorMessage}</Alert>\n            )}\n          </form>\n        )}\n        {formSuccess && (\n          <Alert severity=\"success\">\n            <AlertTitle>\n              Your password was changed <strong>correctly</strong>\n            </AlertTitle>\n            Now you can log in in the app with your new password\n          </Alert>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ResetPassword;\n","import { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport Home from \"./Components/Home\";\nimport ResetPassword from \"./Components/ResetPassword\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/reset-password\">\n            <ResetPassword />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}